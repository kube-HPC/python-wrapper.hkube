# This is a basic workflow to help you get started with Actions

name: CI-MAIN

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    name: Python ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version: [ "3.7", "3.8", "3.9", "3.10"]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - run: ./tools/ci/tests.sh
  coverage:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: x64
      - run: ./tools/ci/coverage.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    needs: test
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: x64
      - run: ./tools/ci/github.sh
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
      - name: set version
        run: echo version=`python setup.py --version`>> $GITHUB_ENV
      - name: trigger artifacts registry
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/kube-HPC/artifacts-registry/dispatches
          event_type: trigger
          client_payload: "{\"version\": \"${{env.version}}\" , \"wrapper\": \"python\" , \"action\": \"dev-version\" }"
        env:
          GITHUB_TOKEN: '${{ secrets.GH_TOKEN }}'
